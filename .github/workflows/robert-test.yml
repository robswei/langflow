name: Docker Build and Push (Langflow Public)
on:
  workflow_call:
    inputs:
      version:
        required: false
        type: string
      release_type:
        required: true
        type: string
      pre_release:
        required: false
        type: boolean
        default: false

  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string
      release_type:
        required: true
        type: choice
        options:
          - base
          - main
      pre_release:
        required: false
        type: boolean
        default: true
env:
  POETRY_VERSION: "1.8.2"
  TEST_TAG: "robswei/langflow:test"
  REGISTRY: ghcr.io

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get-version-input.outputs.version || steps.get-version-base.outputs.version || steps.get-version-main.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12 + Poetry ${{ env.POETRY_VERSION }}
        uses: "./.github/actions/poetry_caching"
        with:
          python-version: "3.12"
          poetry-version: ${{ env.POETRY_VERSION }}
          cache-key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ hashFiles('**/poetry.lock') }}
      - name: Get Version from Input
        if : ${{ inputs.version != '' }}
        id: get-version-input
        run: |
          version=${{ inputs.version }}
          echo version=$version >> $GITHUB_OUTPUT
      - name: Get Version Main
        if : ${{ inputs.version == '' && inputs.release_type == 'base' }}
        id: get-version-base
        run: |
          version=$(cd src/backend/base && poetry version --short)
          echo version=$version >> $GITHUB_OUTPUT
      - name: Get Version Base
        if : ${{ inputs.version == '' && inputs.release_type == 'main' }}
        id: get-version-main
        run: |
          version=$(poetry version --short)
          echo version=$version >> $GITHUB_OUTPUT
  setup:
    runs-on: ubuntu-latest
    needs: get-version
    outputs:
      tags: ${{ steps.set-vars.outputs.tags }}
      file: ${{ steps.set-vars.outputs.file }}
    steps:
      - uses: actions/checkout@v4
      - name: Set Dockerfile and Tags
        id: set-vars
        run: |
          if [[ "${{ inputs.release_type }}" == "base" ]]; then
            echo "tags=ghcr.io/robswei/langflow:base-${{ needs.get-version.outputs.version }},ghcr.io/robswei/langflow:base-latest" >> $GITHUB_OUTPUT
            echo "file=./docker/build_and_push_base.Dockerfile" >> $GITHUB_OUTPUT
          else
            if [[ "${{ inputs.pre_release }}" == "true" ]]; then
              echo "tags=ghcr.io/robswei/langflow:${{ needs.get-version.outputs.version }}" >> $GITHUB_OUTPUT
            else
              echo "tags=ghcr.io/robswei/langflow:${{ needs.get-version.outputs.version }},ghcr.io/robswei/langflow:latest" >> $GITHUB_OUTPUT
            fi
            echo "file=./docker/build_and_push.Dockerfile" >> $GITHUB_OUTPUT
          fi
  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.actor }}/langflow
          tags: |
            type=ref,event=branch
            type=sha
            latest
          labels: |
            org.opencontainers.image.title=robswei Langflow
            org.opencontainers.image.description=Container image for langflow
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.authors=Robert Weiner
            org.opencontainers.image.version={{version}}
            org.opencontainers.image.created={{date 'yyyy-MM-dd'}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.licenses=MIT
      - name: Build and push Docker
        uses: iloveitaly/github-action-nixpacks@main
        with:
          push: true
          tags: ${{ needs.setup.outputs.tags }}
          env: |
            NIXPACKS_CONFIG_FILE=nixpacks.toml

      # - name: Build and Push Docker Image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     push: true
      #     file: ${{ needs.setup.outputs.file }}
      #     tags: ${{ needs.setup.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     # provenance: false will result in a single manifest for all platforms which makes the image pullable from arm64 machines via the emulation (e.g. Apple Silicon machines)
      #     provenance: false

  # build_components:
  #   if: ${{ inputs.release_type == 'main' }}
  #   runs-on: ubuntu-latest
  #   needs: [build, get-version]
  #   strategy:
  #     matrix:
  #       component: [backend, frontend]
  #       include:
  #         - component: backend
  #           dockerfile: ./docker/build_and_push_backend.Dockerfile
  #           tags: ${{ inputs.pre_release == 'true' && format('ghcr.io/robswei/langflow-backend:{0}', needs.get-version.outputs.version) || format('ghcr.io/robswei/langflow-backend:{0},ghcr.io/robswei/langflow-backend:latest', needs.get-version.outputs.version) }}
  #         - component: frontend
  #           dockerfile: ./docker/frontend/build_and_push_frontend.Dockerfile
  #           tags: ${{ inputs.pre_release == 'true' && format('ghcr.io/robswei/langflow-frontend:{0}', needs.get-version.outputs.version) || format('ghcr.io/robswei/langflow-frontend:{0},ghcr.io/robswei/langflow-frontend:latest', needs.get-version.outputs.version) }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Log in to the Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Wait for Docker Hub to propagate (for backend)
  #       run: sleep 120
  #     - name: Build and push ${{ matrix.component }}
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         push: true
  #         build-args: |
  #           LANGFLOW_IMAGE=ghcr.io/robswei/langflow:${{ needs.get-version.outputs.version }}
  #         file: ${{ matrix.dockerfile }}
  #         tags: ${{ matrix.tags }}
  #         # provenance: false will result in a single manifest for all platforms which makes the image pullable from arm64 machines via the emulation (e.g. Apple Silicon machines)
  #         provenance: false
